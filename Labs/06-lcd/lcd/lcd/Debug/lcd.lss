
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000004a2  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800132  00800132  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d4  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000998  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000881  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000501  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000877  00000000  00000000  00003129  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000039a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 33       	cpi	r26, 0x37	; 55
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  9e:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_data>:
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a8:	08 95       	ret

000001aa <lcd_gotoxy>:
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <lcd_gotoxy+0xc>
 1ae:	80 58       	subi	r24, 0x80	; 128
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret
 1b6:	80 54       	subi	r24, 0x40	; 64
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_clrscr>:
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1c4:	08 95       	ret

000001c6 <lcd_putc>:
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1cc:	08 95       	ret

000001ce <lcd_puts>:
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	fc 01       	movw	r30, r24
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <lcd_puts+0xe>
 1d6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
 1da:	fe 01       	movw	r30, r28
 1dc:	ef 01       	movw	r28, r30
 1de:	21 96       	adiw	r28, 0x01	; 1
 1e0:	80 81       	ld	r24, Z
 1e2:	81 11       	cpse	r24, r1
 1e4:	f8 cf       	rjmp	.-16     	; 0x1d6 <lcd_puts+0x8>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1f0:	84 b1       	in	r24, 0x04	; 4
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 202:	8a b1       	in	r24, 0x0a	; 10
 204:	80 61       	ori	r24, 0x10	; 16
 206:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 208:	8a b1       	in	r24, 0x0a	; 10
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 20e:	8a b1       	in	r24, 0x0a	; 10
 210:	80 64       	ori	r24, 0x40	; 64
 212:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 214:	8a b1       	in	r24, 0x0a	; 10
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	99 ef       	ldi	r25, 0xF9	; 249
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x32>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x38>
 224:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	80 61       	ori	r24, 0x10	; 16
 230:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	9e e4       	ldi	r25, 0x4E	; 78
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x4e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x54>
 240:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x5e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x64>
 250:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x6e>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_init+0x74>
 260:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 268:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x84>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init+0x8a>
 276:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 278:	88 e2       	ldi	r24, 0x28	; 40
 27a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 284:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
    lcd_puts("00:00.0   a");
 2a6:	80 e2       	ldi	r24, 0x20	; 32
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
	lcd_gotoxy(1, 1);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
	lcd_puts("b");
 2b6:	8c e2       	ldi	r24, 0x2C	; 44
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
	lcd_gotoxy(11, 1);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	8b e0       	ldi	r24, 0x0B	; 11
 2c2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
	lcd_puts("c_");
 2c6:	8e e2       	ldi	r24, 0x2E	; 46
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 2ce:	80 e4       	ldi	r24, 0x40	; 64
 2d0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
	for (uint8_t i = 0; i < 32; i++)
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <main+0x50>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 2d8:	ec 2f       	mov	r30, r28
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	e0 50       	subi	r30, 0x00	; 0
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	80 81       	ld	r24, Z
 2e2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_data>
	lcd_gotoxy(11, 1);
	lcd_puts("c_");

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 32; i++)
 2e6:	cf 5f       	subi	r28, 0xFF	; 255
 2e8:	c0 32       	cpi	r28, 0x20	; 32
 2ea:	b0 f3       	brcs	.-20     	; 0x2d8 <main+0x40>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
	
	// Display first custom character
	
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set the overflow prescaler to 16 ms and enable interrupt
	TIM0_overflow_4ms();
 2f2:	85 b5       	in	r24, 0x25	; 37
 2f4:	89 7f       	andi	r24, 0xF9	; 249
 2f6:	85 bd       	out	0x25, r24	; 37
 2f8:	85 b5       	in	r24, 0x25	; 37
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 2fe:	ee e6       	ldi	r30, 0x6E	; 110
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	81 60       	ori	r24, 0x01	; 1
 306:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 308:	78 94       	sei
 30a:	ff cf       	rjmp	.-2      	; 0x30a <main+0x72>

0000030c <__vector_16>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	00 d0       	rcall	.+0      	; 0x338 <__vector_16+0x2c>
 338:	1f 92       	push	r1
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
    static uint8_t number_of_overflows = 0;
	static uint8_t number_of_overflows2 = 0;
    static uint8_t tens = 0;        // Tenths of a second
    static uint8_t secs = 0;        // Seconds
	static uint8_t tenssecs = 0;	// tens of seconds
    char lcd_string_tens[1] = " ";      // String for converting numbers by itoa()
 33e:	80 e2       	ldi	r24, 0x20	; 32
 340:	89 83       	std	Y+1, r24	; 0x01
	char lcd_string_secs[1] = " ";
 342:	8a 83       	std	Y+2, r24	; 0x02
	char lcd_string_tenssecs[1] = " ";
 344:	8b 83       	std	Y+3, r24	; 0x03

    number_of_overflows++;
 346:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <number_of_overflows.1951>
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <number_of_overflows.1951>
	number_of_overflows2++;
 350:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <number_of_overflows2.1952>
 354:	9f 5f       	subi	r25, 0xFF	; 255
 356:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <number_of_overflows2.1952>
    if (number_of_overflows >= 24)
 35a:	88 31       	cpi	r24, 0x18	; 24
 35c:	08 f4       	brcc	.+2      	; 0x360 <__vector_16+0x54>
 35e:	52 c0       	rjmp	.+164    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
    {
	    // Do this every 6 x 16 ms = 100 ms (24*4 ms = 100 ms)
	    number_of_overflows = 0;
 360:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <number_of_overflows.1951>
		tens++;
 364:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tens.1953>
 368:	8f 5f       	subi	r24, 0xFF	; 255
 36a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tens.1953>
		if(tens >=10)
 36e:	8a 30       	cpi	r24, 0x0A	; 10
 370:	a0 f0       	brcs	.+40     	; 0x39a <__vector_16+0x8e>
		{
			tens = 0;
 372:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <tens.1953>
			secs++;
 376:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <secs.1954>
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <secs.1954>
			if (secs >= 10)
 380:	8a 30       	cpi	r24, 0x0A	; 10
 382:	58 f0       	brcs	.+22     	; 0x39a <__vector_16+0x8e>
			{
				secs = 0;
 384:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <secs.1954>
				tenssecs++;
 388:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
				if (tenssecs >= 6)
 392:	86 30       	cpi	r24, 0x06	; 6
 394:	10 f0       	brcs	.+4      	; 0x39a <__vector_16+0x8e>
				{
					tenssecs = 0;
 396:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
				}
			}
		}
		if (number_of_overflows2 >= 4)
 39a:	94 30       	cpi	r25, 0x04	; 4
 39c:	98 f1       	brcs	.+102    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			number_of_overflows2 = 0;
 39e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <number_of_overflows2.1952>
            lcd_gotoxy(7,0);
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	87 e0       	ldi	r24, 0x07	; 7
 3a6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			itoa(tens, lcd_string_tens, 10);
 3aa:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tens.1953>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3ae:	4a e0       	ldi	r20, 0x0A	; 10
 3b0:	8e 01       	movw	r16, r28
 3b2:	0f 5f       	subi	r16, 0xFF	; 255
 3b4:	1f 4f       	sbci	r17, 0xFF	; 255
 3b6:	b8 01       	movw	r22, r16
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 1a 02 	call	0x434	; 0x434 <__itoa_ncheck>
		    lcd_putc(lcd_string_tens);
 3be:	80 2f       	mov	r24, r16
 3c0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
            lcd_gotoxy(5,0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	85 e0       	ldi	r24, 0x05	; 5
 3c8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			itoa(secs, lcd_string_secs, 10);
 3cc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <secs.1954>
 3d0:	0f 5f       	subi	r16, 0xFF	; 255
 3d2:	1f 4f       	sbci	r17, 0xFF	; 255
 3d4:	4a e0       	ldi	r20, 0x0A	; 10
 3d6:	b8 01       	movw	r22, r16
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 1a 02 	call	0x434	; 0x434 <__itoa_ncheck>
			lcd_putc(lcd_string_secs);
 3de:	80 2f       	mov	r24, r16
 3e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
			lcd_gotoxy(4,0);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	84 e0       	ldi	r24, 0x04	; 4
 3e8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			itoa(tenssecs, lcd_string_tenssecs, 10);
 3ec:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 3f0:	0f 5f       	subi	r16, 0xFF	; 255
 3f2:	1f 4f       	sbci	r17, 0xFF	; 255
 3f4:	4a e0       	ldi	r20, 0x0A	; 10
 3f6:	b8 01       	movw	r22, r16
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 1a 02 	call	0x434	; 0x434 <__itoa_ncheck>
			lcd_putc(lcd_string_tenssecs);
 3fe:	80 2f       	mov	r24, r16
 400:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
		}
    }
    // Else do nothing and exit the ISR
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__itoa_ncheck>:
 434:	bb 27       	eor	r27, r27
 436:	4a 30       	cpi	r20, 0x0A	; 10
 438:	31 f4       	brne	.+12     	; 0x446 <__itoa_ncheck+0x12>
 43a:	99 23       	and	r25, r25
 43c:	22 f4       	brpl	.+8      	; 0x446 <__itoa_ncheck+0x12>
 43e:	bd e2       	ldi	r27, 0x2D	; 45
 440:	90 95       	com	r25
 442:	81 95       	neg	r24
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	0c 94 26 02 	jmp	0x44c	; 0x44c <__utoa_common>

0000044a <__utoa_ncheck>:
 44a:	bb 27       	eor	r27, r27

0000044c <__utoa_common>:
 44c:	fb 01       	movw	r30, r22
 44e:	55 27       	eor	r21, r21
 450:	aa 27       	eor	r26, r26
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	aa 1f       	adc	r26, r26
 458:	a4 17       	cp	r26, r20
 45a:	10 f0       	brcs	.+4      	; 0x460 <__utoa_common+0x14>
 45c:	a4 1b       	sub	r26, r20
 45e:	83 95       	inc	r24
 460:	50 51       	subi	r21, 0x10	; 16
 462:	b9 f7       	brne	.-18     	; 0x452 <__utoa_common+0x6>
 464:	a0 5d       	subi	r26, 0xD0	; 208
 466:	aa 33       	cpi	r26, 0x3A	; 58
 468:	08 f0       	brcs	.+2      	; 0x46c <__utoa_common+0x20>
 46a:	a9 5d       	subi	r26, 0xD9	; 217
 46c:	a1 93       	st	Z+, r26
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	79 f7       	brne	.-34     	; 0x450 <__utoa_common+0x4>
 472:	b1 11       	cpse	r27, r1
 474:	b1 93       	st	Z+, r27
 476:	11 92       	st	Z+, r1
 478:	cb 01       	movw	r24, r22
 47a:	0c 94 3f 02 	jmp	0x47e	; 0x47e <strrev>

0000047e <strrev>:
 47e:	dc 01       	movw	r26, r24
 480:	fc 01       	movw	r30, r24
 482:	67 2f       	mov	r22, r23
 484:	71 91       	ld	r23, Z+
 486:	77 23       	and	r23, r23
 488:	e1 f7       	brne	.-8      	; 0x482 <strrev+0x4>
 48a:	32 97       	sbiw	r30, 0x02	; 2
 48c:	04 c0       	rjmp	.+8      	; 0x496 <strrev+0x18>
 48e:	7c 91       	ld	r23, X
 490:	6d 93       	st	X+, r22
 492:	70 83       	st	Z, r23
 494:	62 91       	ld	r22, -Z
 496:	ae 17       	cp	r26, r30
 498:	bf 07       	cpc	r27, r31
 49a:	c8 f3       	brcs	.-14     	; 0x48e <strrev+0x10>
 49c:	08 95       	ret

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
