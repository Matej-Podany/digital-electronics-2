
segments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000030c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  000003ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de4  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e8  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c8  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000462  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002bb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 0d 01 	call	0x21a	; 0x21a <SEG_update_shift_regs>

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
   TIM1_overflow_262ms();
  fc:	e1 e8       	ldi	r30, 0x81	; 129
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
   TIM1_overflow_interrupt_enable();
 10c:	ef e6       	ldi	r30, 0x6F	; 111
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
   
   TIM0_overflow_4ms();
 116:	85 b5       	in	r24, 0x25	; 37
 118:	89 7f       	andi	r24, 0xF9	; 249
 11a:	85 bd       	out	0x25, r24	; 37
 11c:	85 b5       	in	r24, 0x25	; 37
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	85 bd       	out	0x25, r24	; 37
   TIM0_overflow_interrupt_enable();
 122:	ee e6       	ldi	r30, 0x6E	; 110
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
   TIM0_overflow_interrupt_disable();
 12c:	80 81       	ld	r24, Z
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 132:	78 94       	sei
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0x44>

00000136 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
    //counting on one display (0) from 0 to 9
	cnt0++;
 158:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt0>
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt0>
	if (cnt0 > 9)
 162:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt0>
 166:	8a 30       	cpi	r24, 0x0A	; 10
 168:	10 f0       	brcs	.+4      	; 0x16e <__vector_13+0x38>
	{
		cnt0=0;
 16a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt0>
	}
    SEG_update_shift_regs(cnt0, 0);
 16e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt0>
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	0e 94 0d 01 	call	0x21a	; 0x21a <SEG_update_shift_regs>
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
    // timer for 1 display 4*4ms <= 16 ms for human eye
	static uint8_t pos = 0;  // This line will only run the first time
	pos++;
 1bc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	if (pos > 3)
 1c6:	84 30       	cpi	r24, 0x04	; 4
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <__vector_16+0x34>
	{
		pos=0;
 1ca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
	SEG_update_shift_regs(pos, 0);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1d4:	0e 94 0d 01 	call	0x21a	; 0x21a <SEG_update_shift_regs>
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 1fa:	64 e0       	ldi	r22, 0x04	; 4
 1fc:	8a e2       	ldi	r24, 0x2A	; 42
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 204:	67 e0       	ldi	r22, 0x07	; 7
 206:	8a e2       	ldi	r24, 0x2A	; 42
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	84 e2       	ldi	r24, 0x24	; 36
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 218:	08 95       	ret

0000021a <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 220:	e8 2f       	mov	r30, r24
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	ec 5f       	subi	r30, 0xFC	; 252
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 22a:	e6 2f       	mov	r30, r22
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	e0 50       	subi	r30, 0x00	; 0
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	d0 81       	ld	r29, Z
	
    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	8b e2       	ldi	r24, 0x2B	; 43
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEG_CLK);
 23e:	67 e0       	ldi	r22, 0x07	; 7
 240:	8b e2       	ldi	r24, 0x2B	; 43
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEG_DATA);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	85 e2       	ldi	r24, 0x25	; 37
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	8a 95       	dec	r24
 256:	f1 f7       	brne	.-4      	; 0x254 <SEG_update_shift_regs+0x3a>
 258:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
	
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	21 c0       	rjmp	.+66     	; 0x2a0 <SEG_update_shift_regs+0x86>
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((segments & 0b00000001) == 0)
 25e:	10 fd       	sbrc	r17, 0
 260:	06 c0       	rjmp	.+12     	; 0x26e <SEG_update_shift_regs+0x54>
		{
			GPIO_write_low(&PORTB, SEG_DATA);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	85 e2       	ldi	r24, 0x25	; 37
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 26c:	05 c0       	rjmp	.+10     	; 0x278 <SEG_update_shift_regs+0x5e>
		}
		else
		{
			GPIO_write_high(&PORTB, SEG_DATA);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	85 e2       	ldi	r24, 0x25	; 37
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	8a 95       	dec	r24
 27c:	f1 f7       	brne	.-4      	; 0x27a <SEG_update_shift_regs+0x60>
 27e:	00 00       	nop
		}
        // Wait 1 us
        _delay_us(1);
		
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 280:	67 e0       	ldi	r22, 0x07	; 7
 282:	8b e2       	ldi	r24, 0x2B	; 43
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <SEG_update_shift_regs+0x72>
 290:	00 00       	nop
		
        // Wait 1 us
        _delay_us(1);
		
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 292:	67 e0       	ldi	r22, 0x07	; 7
 294:	8b e2       	ldi	r24, 0x2B	; 43
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
        // Shift "segments"
		// a b c d e f g DP -> 0 a b c d e f g (next loop -> 0 0 a b c d e f)
        segments = segments >> 1;
 29c:	16 95       	lsr	r17
    // Wait 1 us
    _delay_us(1);
	
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 29e:	cf 5f       	subi	r28, 0xFF	; 255
 2a0:	c8 30       	cpi	r28, 0x08	; 8
 2a2:	e8 f2       	brcs	.-70     	; 0x25e <SEG_update_shift_regs+0x44>
 2a4:	c0 e0       	ldi	r28, 0x00	; 0
 2a6:	21 c0       	rjmp	.+66     	; 0x2ea <SEG_update_shift_regs+0xd0>
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((position & 0b00000001) == 0)
 2a8:	d0 fd       	sbrc	r29, 0
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <SEG_update_shift_regs+0x9e>
        {
	        GPIO_write_low(&PORTB, SEG_DATA);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	85 e2       	ldi	r24, 0x25	; 37
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <SEG_update_shift_regs+0xa8>
        }
        else
		{
			GPIO_write_high(&PORTB, SEG_DATA);
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	85 e2       	ldi	r24, 0x25	; 37
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <SEG_update_shift_regs+0xaa>
 2c8:	00 00       	nop
		
        // Wait 1 us
        _delay_us(1);
		
        // Pull CLK high
		GPIO_write_high(&PORTD, SEG_CLK);
 2ca:	67 e0       	ldi	r22, 0x07	; 7
 2cc:	8b e2       	ldi	r24, 0x2B	; 43
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2d4:	85 e0       	ldi	r24, 0x05	; 5
 2d6:	8a 95       	dec	r24
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <SEG_update_shift_regs+0xbc>
 2da:	00 00       	nop

        // Wait 1 us
        _delay_us(1);
		
        // Pull CLK low
		GPIO_write_low(&PORTD, SEG_CLK);
 2dc:	67 e0       	ldi	r22, 0x07	; 7
 2de:	8b e2       	ldi	r24, 0x2B	; 43
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

        // Shift "position"
        position = position >> 1;
 2e6:	d6 95       	lsr	r29
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2e8:	cf 5f       	subi	r28, 0xFF	; 255
 2ea:	c8 30       	cpi	r28, 0x08	; 8
 2ec:	e8 f2       	brcs	.-70     	; 0x2a8 <SEG_update_shift_regs+0x8e>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEG_LATCH);
 2ee:	64 e0       	ldi	r22, 0x04	; 4
 2f0:	8b e2       	ldi	r24, 0x2B	; 43
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <SEG_update_shift_regs+0xe0>
 2fe:	00 00       	nop

    // Wait 1 us
    _delay_us(1);
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
