
segments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000202  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d7f  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082d  00000000  00000000  00001107  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000561  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b0  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002df  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000270f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 7f 00 	call	0xfe	; 0xfe <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 8f 00 	call	0x11e	; 0x11e <SEG_update_shift_regs>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0xc>

000000fe <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
  fe:	64 e0       	ldi	r22, 0x04	; 4
 100:	8a e2       	ldi	r24, 0x2A	; 42
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 108:	67 e0       	ldi	r22, 0x07	; 7
 10a:	8a e2       	ldi	r24, 0x2A	; 42
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	84 e2       	ldi	r24, 0x24	; 36
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 11c:	08 95       	ret

0000011e <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 122:	e8 2f       	mov	r30, r24
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e0 50       	subi	r30, 0x00	; 0
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	d0 81       	ld	r29, Z
    position = segment_position[position];  // 0, 1, 2, 3
	
    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 12c:	64 e0       	ldi	r22, 0x04	; 4
 12e:	8b e2       	ldi	r24, 0x2B	; 43
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEG_CLK);
 136:	67 e0       	ldi	r22, 0x07	; 7
 138:	8b e2       	ldi	r24, 0x2B	; 43
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEG_DATA);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	85 e2       	ldi	r24, 0x25	; 37
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	85 e0       	ldi	r24, 0x05	; 5
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <SEG_update_shift_regs+0x2e>
 150:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
	
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	21 c0       	rjmp	.+66     	; 0x198 <SEG_update_shift_regs+0x7a>
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((segments & 0b00000001) == 0)
 156:	d0 fd       	sbrc	r29, 0
 158:	06 c0       	rjmp	.+12     	; 0x166 <SEG_update_shift_regs+0x48>
		{
			GPIO_write_low(&PORTB, SEG_DATA);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	85 e2       	ldi	r24, 0x25	; 37
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 164:	05 c0       	rjmp	.+10     	; 0x170 <SEG_update_shift_regs+0x52>
		}
		else
		{
			GPIO_write_high(&PORTB, SEG_DATA);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	85 e2       	ldi	r24, 0x25	; 37
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <SEG_update_shift_regs+0x54>
 176:	00 00       	nop
		}
        // Wait 1 us
        _delay_us(1);
		
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 178:	67 e0       	ldi	r22, 0x07	; 7
 17a:	8b e2       	ldi	r24, 0x2B	; 43
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	8a 95       	dec	r24
 186:	f1 f7       	brne	.-4      	; 0x184 <SEG_update_shift_regs+0x66>
 188:	00 00       	nop
		
        // Wait 1 us
        _delay_us(1);
		
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 18a:	67 e0       	ldi	r22, 0x07	; 7
 18c:	8b e2       	ldi	r24, 0x2B	; 43
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
        // Shift "segments"
		// a b c d e f g DP -> 0 a b c d e f g (next loop -> 0 0 a b c d e f)
        segments = segments >> 1;
 194:	d6 95       	lsr	r29
    // Wait 1 us
    _delay_us(1);
	
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 196:	cf 5f       	subi	r28, 0xFF	; 255
 198:	c8 30       	cpi	r28, 0x08	; 8
 19a:	e8 f2       	brcs	.-70     	; 0x156 <SEG_update_shift_regs+0x38>
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	21 c0       	rjmp	.+66     	; 0x1e2 <SEG_update_shift_regs+0xc4>
    // p3 p2 p1 p0 . . . . (active high values)
    for (position = 0; position < 8; position++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((position & 0b00000001) == 0)
 1a0:	c0 fd       	sbrc	r28, 0
 1a2:	06 c0       	rjmp	.+12     	; 0x1b0 <SEG_update_shift_regs+0x92>
        {
	        GPIO_write_high(&PORTB, SEG_DATA);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	85 e2       	ldi	r24, 0x25	; 37
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <SEG_update_shift_regs+0x9c>
        }
        else
		{
			GPIO_write_low(&PORTB, SEG_DATA);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	85 e2       	ldi	r24, 0x25	; 37
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <SEG_update_shift_regs+0x9e>
 1c0:	00 00       	nop
		
        // Wait 1 us
        _delay_us(1);
		
        // Pull CLK high
		GPIO_write_high(&PORTD, SEG_CLK);
 1c2:	67 e0       	ldi	r22, 0x07	; 7
 1c4:	8b e2       	ldi	r24, 0x2B	; 43
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	8a 95       	dec	r24
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <SEG_update_shift_regs+0xb0>
 1d2:	00 00       	nop

        // Wait 1 us
        _delay_us(1);
		
        // Pull CLK low
		GPIO_write_low(&PORTD, SEG_CLK);
 1d4:	67 e0       	ldi	r22, 0x07	; 7
 1d6:	8b e2       	ldi	r24, 0x2B	; 43
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

        // Shift "position"
        position = position >> 1;
 1de:	c6 95       	lsr	r28
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (position = 0; position < 8; position++)
 1e0:	cf 5f       	subi	r28, 0xFF	; 255
 1e2:	c8 30       	cpi	r28, 0x08	; 8
 1e4:	e8 f2       	brcs	.-70     	; 0x1a0 <SEG_update_shift_regs+0x82>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEG_LATCH);
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	8b e2       	ldi	r24, 0x2B	; 43
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <SEG_update_shift_regs+0xd4>
 1f6:	00 00       	nop

    // Wait 1 us
    _delay_us(1);
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
