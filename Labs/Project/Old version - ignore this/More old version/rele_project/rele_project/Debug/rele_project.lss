
rele_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000066e  00000702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800184  00800184  00000786  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000180f  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb3  00000000  00000000  0000215f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5f  00000000  00000000  00002d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00003974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064f  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c75  00000000  00000000  0000431f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004f94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_18>
  4c:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 38       	cpi	r26, 0x8A	; 138
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 01 	call	0x302	; 0x302 <main>
  9e:	0c 94 35 03 	jmp	0x66a	; 0x66a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	81 81       	ldd	r24, Z+1	; 0x01
  d8:	28 23       	and	r18, r24
  da:	21 83       	std	Z+1, r18	; 0x01
  dc:	08 95       	ret

000000de <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  de:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  e0:	90 81       	ld	r25, Z
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <GPIO_write_low+0xe>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <GPIO_write_low+0xa>
  f0:	20 95       	com	r18
  f2:	29 23       	and	r18, r25
  f4:	20 83       	st	Z, r18
  f6:	08 95       	ret

000000f8 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  f8:	fc 01       	movw	r30, r24
  fa:	40 81       	ld	r20, Z
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <GPIO_write_high+0xe>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <GPIO_write_high+0xa>
 10a:	24 2b       	or	r18, r20
 10c:	20 83       	st	Z, r18
 10e:	08 95       	ret

00000110 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 110:	85 b1       	in	r24, 0x05	; 5
 112:	82 60       	ori	r24, 0x02	; 2
 114:	85 b9       	out	0x05, r24	; 5
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <toggle_e+0x8>
 11c:	00 00       	nop
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret

00000126 <lcd_write>:
 126:	cf 93       	push	r28
 128:	c8 2f       	mov	r28, r24
 12a:	66 23       	and	r22, r22
 12c:	21 f0       	breq	.+8      	; 0x136 <lcd_write+0x10>
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	81 60       	ori	r24, 0x01	; 1
 132:	85 b9       	out	0x05, r24	; 5
 134:	03 c0       	rjmp	.+6      	; 0x13c <lcd_write+0x16>
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	8a b9       	out	0x0a, r24	; 10
 142:	8a b1       	in	r24, 0x0a	; 10
 144:	80 62       	ori	r24, 0x20	; 32
 146:	8a b9       	out	0x0a, r24	; 10
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	8a b1       	in	r24, 0x0a	; 10
 150:	80 68       	ori	r24, 0x80	; 128
 152:	8a b9       	out	0x0a, r24	; 10
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8f 77       	andi	r24, 0x7F	; 127
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	8b b9       	out	0x0b, r24	; 11
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8f 7e       	andi	r24, 0xEF	; 239
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	cc 23       	and	r28, r28
 16e:	1c f4       	brge	.+6      	; 0x176 <lcd_write+0x50>
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	80 68       	ori	r24, 0x80	; 128
 174:	8b b9       	out	0x0b, r24	; 11
 176:	c6 ff       	sbrs	r28, 6
 178:	03 c0       	rjmp	.+6      	; 0x180 <lcd_write+0x5a>
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	c5 ff       	sbrs	r28, 5
 182:	03 c0       	rjmp	.+6      	; 0x18a <lcd_write+0x64>
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 62       	ori	r24, 0x20	; 32
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	c4 ff       	sbrs	r28, 4
 18c:	03 c0       	rjmp	.+6      	; 0x194 <lcd_write+0x6e>
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	80 61       	ori	r24, 0x10	; 16
 192:	8b b9       	out	0x0b, r24	; 11
 194:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8f 7b       	andi	r24, 0xBF	; 191
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8f 7e       	andi	r24, 0xEF	; 239
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	c3 ff       	sbrs	r28, 3
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <lcd_write+0x94>
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	c2 ff       	sbrs	r28, 2
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <lcd_write+0x9e>
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	c1 ff       	sbrs	r28, 1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <lcd_write+0xa8>
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	c0 ff       	sbrs	r28, 0
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <lcd_write+0xb2>
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	8b b9       	out	0x0b, r24	; 11
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	8b b9       	out	0x0b, r24	; 11
 1f4:	87 eb       	ldi	r24, 0xB7	; 183
 1f6:	9b e0       	ldi	r25, 0x0B	; 11
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_write+0xd2>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_write+0xd8>
 1fe:	00 00       	nop
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <lcd_command>:
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
 20a:	08 95       	ret

0000020c <lcd_data>:
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
 212:	08 95       	ret

00000214 <lcd_gotoxy>:
 214:	61 11       	cpse	r22, r1
 216:	04 c0       	rjmp	.+8      	; 0x220 <lcd_gotoxy+0xc>
 218:	80 58       	subi	r24, 0x80	; 128
 21a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 21e:	08 95       	ret
 220:	80 54       	subi	r24, 0x40	; 64
 222:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 226:	08 95       	ret

00000228 <lcd_clrscr>:
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 22e:	08 95       	ret

00000230 <lcd_putc>:
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
 236:	08 95       	ret

00000238 <lcd_puts>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	fc 01       	movw	r30, r24
 23e:	03 c0       	rjmp	.+6      	; 0x246 <lcd_puts+0xe>
 240:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
 244:	fe 01       	movw	r30, r28
 246:	ef 01       	movw	r28, r30
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	80 81       	ld	r24, Z
 24c:	81 11       	cpse	r24, r1
 24e:	f8 cf       	rjmp	.-16     	; 0x240 <lcd_puts+0x8>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 25a:	84 b1       	in	r24, 0x04	; 4
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	80 62       	ori	r24, 0x20	; 32
 264:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 266:	84 b1       	in	r24, 0x04	; 4
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	80 62       	ori	r24, 0x20	; 32
 276:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 278:	8a b1       	in	r24, 0x0a	; 10
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 27e:	8a b1       	in	r24, 0x0a	; 10
 280:	80 68       	ori	r24, 0x80	; 128
 282:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	99 ef       	ldi	r25, 0xF9	; 249
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_init+0x32>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd_init+0x38>
 28e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	80 62       	ori	r24, 0x20	; 32
 294:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 296:	8b b1       	in	r24, 0x0b	; 11
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 29c:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2a0:	8f e1       	ldi	r24, 0x1F	; 31
 2a2:	9e e4       	ldi	r25, 0x4E	; 78
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x4e>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_init+0x54>
 2aa:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 2ac:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x5e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_init+0x64>
 2ba:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 2bc:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init+0x6e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_init+0x74>
 2ca:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2cc:	8b b1       	in	r24, 0x0b	; 11
 2ce:	8f 7e       	andi	r24, 0xEF	; 239
 2d0:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2d2:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_init+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_init+0x8a>
 2e0:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2ee:	0e 94 14 01 	call	0x228	; 0x228 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2f8:	8c 2f       	mov	r24, r28
 2fa:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 302:	8c e0       	ldi	r24, 0x0C	; 12
 304:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_init>

    // Put string at LCD display
    lcd_gotoxy(0, 1);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
    lcd_puts("LVL:");
 310:	88 e3       	ldi	r24, 0x38	; 56
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_puts>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 318:	80 e4       	ldi	r24, 0x40	; 64
 31a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
	for (uint8_t i = 0; i < 40; i++)
 31e:	c0 e0       	ldi	r28, 0x00	; 0
 320:	08 c0       	rjmp	.+16     	; 0x332 <main+0x30>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 322:	ec 2f       	mov	r30, r28
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	e0 50       	subi	r30, 0x00	; 0
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	80 81       	ld	r24, Z
 32c:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_data>
    lcd_gotoxy(0, 1);
    lcd_puts("LVL:");

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 40; i++)
 330:	cf 5f       	subi	r28, 0xFF	; 255
 332:	c8 32       	cpi	r28, 0x28	; 40
 334:	b0 f3       	brcs	.-20     	; 0x322 <main+0x20>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 336:	80 e8       	ldi	r24, 0x80	; 128
 338:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
	
    // Configure 8-bit Timer/Counter0 for lcd updates
    // Set the overflow prescaler to 262 ms and enable interrupt
	TIM0_overflow_4ms();
 33c:	85 b5       	in	r24, 0x25	; 37
 33e:	89 7f       	andi	r24, 0xF9	; 249
 340:	85 bd       	out	0x25, r24	; 37
 342:	85 b5       	in	r24, 0x25	; 37
 344:	81 60       	ori	r24, 0x01	; 1
 346:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 348:	ee e6       	ldi	r30, 0x6E	; 110
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	81 60       	ori	r24, 0x01	; 1
 350:	80 83       	st	Z, r24
	//EIMSK |= (1<<INT0);
	//EICRA |= (1<<ISC00);
	//EICRA &= ~(1<<ISC01);

    // Enables interrupts by setting the global interrupt mask
    sei();
 352:	78 94       	sei
	
	//starting uart communication
	uart_init(UART_BAUD_SELECT(9600, 16000000UL));
 354:	87 e6       	ldi	r24, 0x67	; 103
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 c3 02 	call	0x586	; 0x586 <uart_init>
	
	// 
	GPIO_config_output(&DDRD, ULTRA_TRIGGER);
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	8a e2       	ldi	r24, 0x2A	; 42
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD, ULTRA_TRIGGER);
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	8b e2       	ldi	r24, 0x2B	; 43
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	
	GPIO_config_input_nopull(&DDRD, ULTRA_ECHO);
 370:	63 e0       	ldi	r22, 0x03	; 3
 372:	8a e2       	ldi	r24, 0x2A	; 42
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	GPIO_config_output(&DDRB, PB5);
 37a:	65 e0       	ldi	r22, 0x05	; 5
 37c:	84 e2       	ldi	r24, 0x24	; 36
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>

    // Infinite loop
    while (1)
    {
        uart_puts("while is working/r/n");
 384:	8d e3       	ldi	r24, 0x3D	; 61
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <uart_puts>
		GPIO_write_high(&DDRD, ULTRA_TRIGGER);
 38c:	62 e0       	ldi	r22, 0x02	; 2
 38e:	8a e2       	ldi	r24, 0x2A	; 42
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_write_high>
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	8a 95       	dec	r24
 39a:	f1 f7       	brne	.-4      	; 0x398 <main+0x96>
 39c:	00 00       	nop
        _delay_us(10);
        GPIO_write_low(&DDRD, ULTRA_TRIGGER);
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	8a e2       	ldi	r24, 0x2A	; 42
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
 3a8:	ed cf       	rjmp	.-38     	; 0x384 <main+0x82>

000003aa <__vector_16>:
 * Function: Timer/Counter0 overflow interrupt
 * Purpose:  Update LCD display every overflow.
 *           
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	2f 93       	push	r18
 3b6:	3f 93       	push	r19
 3b8:	4f 93       	push	r20
 3ba:	5f 93       	push	r21
 3bc:	6f 93       	push	r22
 3be:	7f 93       	push	r23
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
 3c4:	af 93       	push	r26
 3c6:	bf 93       	push	r27
 3c8:	ef 93       	push	r30
 3ca:	ff 93       	push	r31
    uart_puts("TIM0 disp ovrf/r/n");
 3cc:	82 e5       	ldi	r24, 0x52	; 82
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <uart_puts>
	lcd_gotoxy(5,1);
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
	lcd_puts("2cm");
 3dc:	85 e6       	ldi	r24, 0x65	; 101
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_puts>
    //itoa(tens, lcd_string_tens, 10);
	lcd_gotoxy(15,1);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	8f e0       	ldi	r24, 0x0F	; 15
 3e8:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
    lcd_putc(3);
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
	lcd_gotoxy(15,0);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	8f e0       	ldi	r24, 0x0F	; 15
 3f6:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
	lcd_putc(4);
 3fa:	84 e0       	ldi	r24, 0x04	; 4
 3fc:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
	
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	7f 91       	pop	r23
 40e:	6f 91       	pop	r22
 410:	5f 91       	pop	r21
 412:	4f 91       	pop	r20
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_1>:

ISR(INT0_vect)
{
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	uart_puts("inside INT0/r/n");
 448:	89 e6       	ldi	r24, 0x69	; 105
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <uart_puts>
	if (counting == 0)
 450:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
 454:	81 11       	cpse	r24, r1
 456:	10 c0       	rjmp	.+32     	; 0x478 <__vector_1+0x56>
	{
		counting = 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
		uart_puts("start/r/n");
 45e:	89 e7       	ldi	r24, 0x79	; 121
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <uart_puts>
		TIM1_overflow_4ms();
 466:	e1 e8       	ldi	r30, 0x81	; 129
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	89 7f       	andi	r24, 0xF9	; 249
 46e:	80 83       	st	Z, r24
 470:	80 81       	ld	r24, Z
 472:	81 60       	ori	r24, 0x01	; 1
 474:	80 83       	st	Z, r24
 476:	1c c0       	rjmp	.+56     	; 0x4b0 <__vector_1+0x8e>
	}
	else if (counting == 1)
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	d1 f4       	brne	.+52     	; 0x4b0 <__vector_1+0x8e>
	{
		TIM1_stop();
 47c:	e1 e8       	ldi	r30, 0x81	; 129
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	88 7f       	andi	r24, 0xF8	; 248
 484:	80 83       	st	Z, r24
		pulse_length = TCNT1;
 486:	c4 e8       	ldi	r28, 0x84	; 132
 488:	d0 e0       	ldi	r29, 0x00	; 0
 48a:	88 81       	ld	r24, Y
 48c:	99 81       	ldd	r25, Y+1	; 0x01
		counting = 0;
 48e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 492:	4a e0       	ldi	r20, 0x0A	; 10
 494:	68 e2       	ldi	r22, 0x28	; 40
 496:	71 e0       	ldi	r23, 0x01	; 1
 498:	0e 94 00 03 	call	0x600	; 0x600 <__itoa_ncheck>
		itoa(pulse_length, uart_string, 10);
		uart_puts(uart_string);
 49c:	88 e2       	ldi	r24, 0x28	; 40
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <uart_puts>
		uart_puts("/r/n");
 4a4:	84 e7       	ldi	r24, 0x74	; 116
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <uart_puts>
		TCNT1 = 0;
 4ac:	19 82       	std	Y+1, r1	; 0x01
 4ae:	18 82       	st	Y, r1
	}
	
	
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	bf 91       	pop	r27
 4ba:	af 91       	pop	r26
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	7f 91       	pop	r23
 4c2:	6f 91       	pop	r22
 4c4:	5f 91       	pop	r21
 4c6:	4f 91       	pop	r20
 4c8:	3f 91       	pop	r19
 4ca:	2f 91       	pop	r18
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	2f 93       	push	r18
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	ef 93       	push	r30
 4e8:	ff 93       	push	r31
 4ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4ee:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4f2:	8c 71       	andi	r24, 0x1C	; 28
 4f4:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <UART_RxHead>
 4f8:	ef 5f       	subi	r30, 0xFF	; 255
 4fa:	ef 77       	andi	r30, 0x7F	; 127
 4fc:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <UART_RxTail>
 500:	e9 17       	cp	r30, r25
 502:	39 f0       	breq	.+14     	; 0x512 <__vector_18+0x3c>
 504:	e0 93 87 01 	sts	0x0187, r30	; 0x800187 <UART_RxHead>
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	e6 57       	subi	r30, 0x76	; 118
 50c:	fe 4f       	sbci	r31, 0xFE	; 254
 50e:	20 83       	st	Z, r18
 510:	01 c0       	rjmp	.+2      	; 0x514 <__vector_18+0x3e>
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <UART_LastRxError>
 518:	89 2b       	or	r24, r25
 51a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <UART_LastRxError>
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <__vector_19>:
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
 544:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <UART_TxHead>
 548:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <UART_TxTail>
 54c:	98 17       	cp	r25, r24
 54e:	69 f0       	breq	.+26     	; 0x56a <__vector_19+0x38>
 550:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <UART_TxTail>
 554:	ef 5f       	subi	r30, 0xFF	; 255
 556:	ef 77       	andi	r30, 0x7F	; 127
 558:	e0 93 88 01 	sts	0x0188, r30	; 0x800188 <UART_TxTail>
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	e6 5f       	subi	r30, 0xF6	; 246
 560:	fd 4f       	sbci	r31, 0xFD	; 253
 562:	80 81       	ld	r24, Z
 564:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 568:	05 c0       	rjmp	.+10     	; 0x574 <__vector_19+0x42>
 56a:	e1 ec       	ldi	r30, 0xC1	; 193
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	8f 7d       	andi	r24, 0xDF	; 223
 572:	80 83       	st	Z, r24
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	9f 91       	pop	r25
 57a:	8f 91       	pop	r24
 57c:	0f 90       	pop	r0
 57e:	0f be       	out	0x3f, r0	; 63
 580:	0f 90       	pop	r0
 582:	1f 90       	pop	r1
 584:	18 95       	reti

00000586 <uart_init>:
 586:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <UART_TxHead>
 58a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <UART_TxTail>
 58e:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <UART_RxHead>
 592:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <UART_RxTail>
 596:	28 2f       	mov	r18, r24
 598:	39 2f       	mov	r19, r25
 59a:	33 23       	and	r19, r19
 59c:	1c f4       	brge	.+6      	; 0x5a4 <uart_init+0x1e>
 59e:	22 e0       	ldi	r18, 0x02	; 2
 5a0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5a4:	90 78       	andi	r25, 0x80	; 128
 5a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 5aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5ae:	88 e9       	ldi	r24, 0x98	; 152
 5b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 5b4:	86 e0       	ldi	r24, 0x06	; 6
 5b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5ba:	08 95       	ret

000005bc <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 5bc:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <UART_TxHead>
 5c0:	2f 5f       	subi	r18, 0xFF	; 255
 5c2:	2f 77       	andi	r18, 0x7F	; 127

    while (tmphead == UART_TxTail)
 5c4:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <UART_TxTail>
 5c8:	29 17       	cp	r18, r25
 5ca:	e1 f3       	breq	.-8      	; 0x5c4 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 5cc:	e2 2f       	mov	r30, r18
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	e6 5f       	subi	r30, 0xF6	; 246
 5d2:	fd 4f       	sbci	r31, 0xFD	; 253
 5d4:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 5d6:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 5da:	e1 ec       	ldi	r30, 0xC1	; 193
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	80 62       	ori	r24, 0x20	; 32
 5e2:	80 83       	st	Z, r24
 5e4:	08 95       	ret

000005e6 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	ec 01       	movw	r28, r24
    while (*s)
 5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <uart_puts+0xe>
        uart_putc(*s++);
 5ee:	21 96       	adiw	r28, 0x01	; 1
 5f0:	0e 94 de 02 	call	0x5bc	; 0x5bc <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 5f4:	88 81       	ld	r24, Y
 5f6:	81 11       	cpse	r24, r1
 5f8:	fa cf       	rjmp	.-12     	; 0x5ee <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <__itoa_ncheck>:
 600:	bb 27       	eor	r27, r27
 602:	4a 30       	cpi	r20, 0x0A	; 10
 604:	31 f4       	brne	.+12     	; 0x612 <__itoa_ncheck+0x12>
 606:	99 23       	and	r25, r25
 608:	22 f4       	brpl	.+8      	; 0x612 <__itoa_ncheck+0x12>
 60a:	bd e2       	ldi	r27, 0x2D	; 45
 60c:	90 95       	com	r25
 60e:	81 95       	neg	r24
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	0c 94 0c 03 	jmp	0x618	; 0x618 <__utoa_common>

00000616 <__utoa_ncheck>:
 616:	bb 27       	eor	r27, r27

00000618 <__utoa_common>:
 618:	fb 01       	movw	r30, r22
 61a:	55 27       	eor	r21, r21
 61c:	aa 27       	eor	r26, r26
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	aa 1f       	adc	r26, r26
 624:	a4 17       	cp	r26, r20
 626:	10 f0       	brcs	.+4      	; 0x62c <__utoa_common+0x14>
 628:	a4 1b       	sub	r26, r20
 62a:	83 95       	inc	r24
 62c:	50 51       	subi	r21, 0x10	; 16
 62e:	b9 f7       	brne	.-18     	; 0x61e <__utoa_common+0x6>
 630:	a0 5d       	subi	r26, 0xD0	; 208
 632:	aa 33       	cpi	r26, 0x3A	; 58
 634:	08 f0       	brcs	.+2      	; 0x638 <__utoa_common+0x20>
 636:	a9 5d       	subi	r26, 0xD9	; 217
 638:	a1 93       	st	Z+, r26
 63a:	00 97       	sbiw	r24, 0x00	; 0
 63c:	79 f7       	brne	.-34     	; 0x61c <__utoa_common+0x4>
 63e:	b1 11       	cpse	r27, r1
 640:	b1 93       	st	Z+, r27
 642:	11 92       	st	Z+, r1
 644:	cb 01       	movw	r24, r22
 646:	0c 94 25 03 	jmp	0x64a	; 0x64a <strrev>

0000064a <strrev>:
 64a:	dc 01       	movw	r26, r24
 64c:	fc 01       	movw	r30, r24
 64e:	67 2f       	mov	r22, r23
 650:	71 91       	ld	r23, Z+
 652:	77 23       	and	r23, r23
 654:	e1 f7       	brne	.-8      	; 0x64e <strrev+0x4>
 656:	32 97       	sbiw	r30, 0x02	; 2
 658:	04 c0       	rjmp	.+8      	; 0x662 <strrev+0x18>
 65a:	7c 91       	ld	r23, X
 65c:	6d 93       	st	X+, r22
 65e:	70 83       	st	Z, r23
 660:	62 91       	ld	r22, -Z
 662:	ae 17       	cp	r26, r30
 664:	bf 07       	cpc	r27, r31
 666:	c8 f3       	brcs	.-14     	; 0x65a <strrev+0x10>
 668:	08 95       	ret

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
