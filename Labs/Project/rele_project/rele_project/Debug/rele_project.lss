
rele_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000350  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000350  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f69  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ee  00000000  00000000  00001481  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007bc  00000000  00000000  00001d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  0000252c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000494  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000791  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000032e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_16>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 44 01 	call	0x288	; 0x288 <main>
  8e:	0c 94 a6 01 	jmp	0x34c	; 0x34c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  96:	85 b1       	in	r24, 0x05	; 5
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <toggle_e+0x8>
  a2:	00 00       	nop
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	08 95       	ret

000000ac <lcd_write>:
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
  b0:	66 23       	and	r22, r22
  b2:	21 f0       	breq	.+8      	; 0xbc <lcd_write+0x10>
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <lcd_write+0x16>
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	8a b9       	out	0x0a, r24	; 10
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	8a b9       	out	0x0a, r24	; 10
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	8a b9       	out	0x0a, r24	; 10
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 7b       	andi	r24, 0xBF	; 191
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8f 7e       	andi	r24, 0xEF	; 239
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	cc 23       	and	r28, r28
  f4:	1c f4       	brge	.+6      	; 0xfc <lcd_write+0x50>
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	c6 ff       	sbrs	r28, 6
  fe:	03 c0       	rjmp	.+6      	; 0x106 <lcd_write+0x5a>
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	80 64       	ori	r24, 0x40	; 64
 104:	8b b9       	out	0x0b, r24	; 11
 106:	c5 ff       	sbrs	r28, 5
 108:	03 c0       	rjmp	.+6      	; 0x110 <lcd_write+0x64>
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	c4 ff       	sbrs	r28, 4
 112:	03 c0       	rjmp	.+6      	; 0x11a <lcd_write+0x6e>
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	80 61       	ori	r24, 0x10	; 16
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	8b b9       	out	0x0b, r24	; 11
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	8f 7b       	andi	r24, 0xBF	; 191
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	8f 7e       	andi	r24, 0xEF	; 239
 134:	8b b9       	out	0x0b, r24	; 11
 136:	c3 ff       	sbrs	r28, 3
 138:	03 c0       	rjmp	.+6      	; 0x140 <lcd_write+0x94>
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	c2 ff       	sbrs	r28, 2
 142:	03 c0       	rjmp	.+6      	; 0x14a <lcd_write+0x9e>
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	80 64       	ori	r24, 0x40	; 64
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	c1 ff       	sbrs	r28, 1
 14c:	03 c0       	rjmp	.+6      	; 0x154 <lcd_write+0xa8>
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	80 62       	ori	r24, 0x20	; 32
 152:	8b b9       	out	0x0b, r24	; 11
 154:	c0 ff       	sbrs	r28, 0
 156:	03 c0       	rjmp	.+6      	; 0x15e <lcd_write+0xb2>
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	80 61       	ori	r24, 0x10	; 16
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 61       	ori	r24, 0x10	; 16
 166:	8b b9       	out	0x0b, r24	; 11
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 62       	ori	r24, 0x20	; 32
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 64       	ori	r24, 0x40	; 64
 172:	8b b9       	out	0x0b, r24	; 11
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	80 68       	ori	r24, 0x80	; 128
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	87 eb       	ldi	r24, 0xB7	; 183
 17c:	9b e0       	ldi	r25, 0x0B	; 11
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_write+0xd2>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_write+0xd8>
 184:	00 00       	nop
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcd_command>:
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	0e 94 56 00 	call	0xac	; 0xac <lcd_write>
 190:	08 95       	ret

00000192 <lcd_data>:
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	0e 94 56 00 	call	0xac	; 0xac <lcd_write>
 198:	08 95       	ret

0000019a <lcd_gotoxy>:
 19a:	61 11       	cpse	r22, r1
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <lcd_gotoxy+0xc>
 19e:	80 58       	subi	r24, 0x80	; 128
 1a0:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
 1a4:	08 95       	ret
 1a6:	80 54       	subi	r24, 0x40	; 64
 1a8:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
 1ac:	08 95       	ret

000001ae <lcd_clrscr>:
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
 1b4:	08 95       	ret

000001b6 <lcd_putc>:
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	0e 94 56 00 	call	0xac	; 0xac <lcd_write>
 1bc:	08 95       	ret

000001be <lcd_puts>:
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	fc 01       	movw	r30, r24
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <lcd_puts+0xe>
 1c6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putc>
 1ca:	fe 01       	movw	r30, r28
 1cc:	ef 01       	movw	r28, r30
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	80 81       	ld	r24, Z
 1d2:	81 11       	cpse	r24, r1
 1d4:	f8 cf       	rjmp	.-16     	; 0x1c6 <lcd_puts+0x8>
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1dc:	cf 93       	push	r28
 1de:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1e0:	84 b1       	in	r24, 0x04	; 4
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1e6:	8a b1       	in	r24, 0x0a	; 10
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1ec:	84 b1       	in	r24, 0x04	; 4
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1f2:	8a b1       	in	r24, 0x0a	; 10
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1f8:	8a b1       	in	r24, 0x0a	; 10
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1fe:	8a b1       	in	r24, 0x0a	; 10
 200:	80 64       	ori	r24, 0x40	; 64
 202:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 204:	8a b1       	in	r24, 0x0a	; 10
 206:	80 68       	ori	r24, 0x80	; 128
 208:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	99 ef       	ldi	r25, 0xF9	; 249
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x32>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_init+0x38>
 214:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	80 62       	ori	r24, 0x20	; 32
 21a:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	80 61       	ori	r24, 0x10	; 16
 220:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 222:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 226:	8f e1       	ldi	r24, 0x1F	; 31
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x4e>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x54>
 230:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 232:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x5e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x64>
 240:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 242:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x6e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x74>
 250:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	8f 7e       	andi	r24, 0xEF	; 239
 256:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 258:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x84>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x8a>
 266:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 26e:	88 e0       	ldi	r24, 0x08	; 8
 270:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 274:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 27e:	8c 2f       	mov	r24, r28
 280:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 288:	8c e0       	ldi	r24, 0x0C	; 12
 28a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(0, 1);
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_gotoxy>
    lcd_puts("LVL:");
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_puts>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
	for (uint8_t i = 0; i < 40; i++)
 2a4:	c0 e0       	ldi	r28, 0x00	; 0
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <main+0x30>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 2a8:	ec 2f       	mov	r30, r28
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	e0 50       	subi	r30, 0x00	; 0
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_data>
    lcd_gotoxy(0, 1);
    lcd_puts("LVL:");

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 40; i++)
 2b6:	cf 5f       	subi	r28, 0xFF	; 255
 2b8:	c8 32       	cpi	r28, 0x28	; 40
 2ba:	b0 f3       	brcs	.-20     	; 0x2a8 <main+0x20>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 2bc:	80 e8       	ldi	r24, 0x80	; 128
 2be:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_command>
	
	// Display first custom character
	
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set the overflow prescaler to 16 ms and enable interrupt
	TIM0_overflow_4ms();
 2c2:	85 b5       	in	r24, 0x25	; 37
 2c4:	89 7f       	andi	r24, 0xF9	; 249
 2c6:	85 bd       	out	0x25, r24	; 37
 2c8:	85 b5       	in	r24, 0x25	; 37
 2ca:	81 60       	ori	r24, 0x01	; 1
 2cc:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 2ce:	ee e6       	ldi	r30, 0x6E	; 110
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 2d8:	78 94       	sei
 2da:	ff cf       	rjmp	.-2      	; 0x2da <main+0x52>

000002dc <__vector_16>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
    lcd_gotoxy(5,1);
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_gotoxy>
	lcd_puts("2cm");
 306:	8d e2       	ldi	r24, 0x2D	; 45
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_puts>
    //itoa(tens, lcd_string_tens, 10);
	lcd_gotoxy(15,1);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	8f e0       	ldi	r24, 0x0F	; 15
 312:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_gotoxy>
    lcd_putc(3);
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putc>
	lcd_gotoxy(15,0);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8f e0       	ldi	r24, 0x0F	; 15
 320:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_gotoxy>
	lcd_putc(4);
 324:	84 e0       	ldi	r24, 0x04	; 4
 326:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putc>
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
