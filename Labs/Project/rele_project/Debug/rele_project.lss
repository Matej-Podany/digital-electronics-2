
rele_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000008ec  00000980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000109  0080014c  0080014c  000009cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001988  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c01  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf1  00000000  00000000  0000311d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00003e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067b  00000000  00000000  000040f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bbf  00000000  00000000  0000476f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000532e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_18>
  4c:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 35       	cpi	r26, 0x55	; 85
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 01 	call	0x326	; 0x326 <main>
  9e:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	81 81       	ldd	r24, Z+1	; 0x01
  d8:	28 23       	and	r18, r24
  da:	21 83       	std	Z+1, r18	; 0x01
  dc:	08 95       	ret

000000de <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  de:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  e0:	90 81       	ld	r25, Z
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <GPIO_write_low+0xe>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <GPIO_write_low+0xa>
  f0:	20 95       	com	r18
  f2:	29 23       	and	r18, r25
  f4:	20 83       	st	Z, r18
  f6:	08 95       	ret

000000f8 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  f8:	fc 01       	movw	r30, r24
  fa:	40 81       	ld	r20, Z
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <GPIO_write_high+0xe>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <GPIO_write_high+0xa>
 10a:	24 2b       	or	r18, r20
 10c:	20 83       	st	Z, r18
 10e:	08 95       	ret

00000110 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 110:	85 b1       	in	r24, 0x05	; 5
 112:	82 60       	ori	r24, 0x02	; 2
 114:	85 b9       	out	0x05, r24	; 5
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <toggle_e+0x8>
 11c:	00 00       	nop
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret

00000126 <lcd_write>:
 126:	cf 93       	push	r28
 128:	c8 2f       	mov	r28, r24
 12a:	66 23       	and	r22, r22
 12c:	21 f0       	breq	.+8      	; 0x136 <lcd_write+0x10>
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	81 60       	ori	r24, 0x01	; 1
 132:	85 b9       	out	0x05, r24	; 5
 134:	03 c0       	rjmp	.+6      	; 0x13c <lcd_write+0x16>
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	8a b9       	out	0x0a, r24	; 10
 142:	8a b1       	in	r24, 0x0a	; 10
 144:	80 62       	ori	r24, 0x20	; 32
 146:	8a b9       	out	0x0a, r24	; 10
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	8a b1       	in	r24, 0x0a	; 10
 150:	80 68       	ori	r24, 0x80	; 128
 152:	8a b9       	out	0x0a, r24	; 10
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8f 77       	andi	r24, 0x7F	; 127
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	8b b9       	out	0x0b, r24	; 11
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8f 7e       	andi	r24, 0xEF	; 239
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	cc 23       	and	r28, r28
 16e:	1c f4       	brge	.+6      	; 0x176 <lcd_write+0x50>
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	80 68       	ori	r24, 0x80	; 128
 174:	8b b9       	out	0x0b, r24	; 11
 176:	c6 ff       	sbrs	r28, 6
 178:	03 c0       	rjmp	.+6      	; 0x180 <lcd_write+0x5a>
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	c5 ff       	sbrs	r28, 5
 182:	03 c0       	rjmp	.+6      	; 0x18a <lcd_write+0x64>
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 62       	ori	r24, 0x20	; 32
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	c4 ff       	sbrs	r28, 4
 18c:	03 c0       	rjmp	.+6      	; 0x194 <lcd_write+0x6e>
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	80 61       	ori	r24, 0x10	; 16
 192:	8b b9       	out	0x0b, r24	; 11
 194:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8f 7b       	andi	r24, 0xBF	; 191
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8f 7e       	andi	r24, 0xEF	; 239
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	c3 ff       	sbrs	r28, 3
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <lcd_write+0x94>
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	c2 ff       	sbrs	r28, 2
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <lcd_write+0x9e>
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	c1 ff       	sbrs	r28, 1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <lcd_write+0xa8>
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	c0 ff       	sbrs	r28, 0
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <lcd_write+0xb2>
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	8b b9       	out	0x0b, r24	; 11
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	8b b9       	out	0x0b, r24	; 11
 1f4:	87 eb       	ldi	r24, 0xB7	; 183
 1f6:	9b e0       	ldi	r25, 0x0B	; 11
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_write+0xd2>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_write+0xd8>
 1fe:	00 00       	nop
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <lcd_command>:
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
 20a:	08 95       	ret

0000020c <lcd_data>:
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
 212:	08 95       	ret

00000214 <lcd_gotoxy>:
 214:	61 11       	cpse	r22, r1
 216:	04 c0       	rjmp	.+8      	; 0x220 <lcd_gotoxy+0xc>
 218:	80 58       	subi	r24, 0x80	; 128
 21a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 21e:	08 95       	ret
 220:	80 54       	subi	r24, 0x40	; 64
 222:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 226:	08 95       	ret

00000228 <lcd_clrscr>:
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 22e:	08 95       	ret

00000230 <lcd_putc>:
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
 236:	08 95       	ret

00000238 <lcd_puts>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	fc 01       	movw	r30, r24
 23e:	03 c0       	rjmp	.+6      	; 0x246 <lcd_puts+0xe>
 240:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
 244:	fe 01       	movw	r30, r28
 246:	ef 01       	movw	r28, r30
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	80 81       	ld	r24, Z
 24c:	81 11       	cpse	r24, r1
 24e:	f8 cf       	rjmp	.-16     	; 0x240 <lcd_puts+0x8>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 25a:	84 b1       	in	r24, 0x04	; 4
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	80 62       	ori	r24, 0x20	; 32
 264:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 266:	84 b1       	in	r24, 0x04	; 4
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	80 62       	ori	r24, 0x20	; 32
 276:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 278:	8a b1       	in	r24, 0x0a	; 10
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 27e:	8a b1       	in	r24, 0x0a	; 10
 280:	80 68       	ori	r24, 0x80	; 128
 282:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	99 ef       	ldi	r25, 0xF9	; 249
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_init+0x32>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd_init+0x38>
 28e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	80 62       	ori	r24, 0x20	; 32
 294:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 296:	8b b1       	in	r24, 0x0b	; 11
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 29c:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2a0:	8f e1       	ldi	r24, 0x1F	; 31
 2a2:	9e e4       	ldi	r25, 0x4E	; 78
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x4e>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_init+0x54>
 2aa:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 2ac:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x5e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_init+0x64>
 2ba:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 2bc:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init+0x6e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_init+0x74>
 2ca:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2cc:	8b b1       	in	r24, 0x0b	; 11
 2ce:	8f 7e       	andi	r24, 0xEF	; 239
 2d0:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2d2:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_init+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_init+0x8a>
 2e0:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2ee:	0e 94 14 01 	call	0x228	; 0x228 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2f8:	8c 2f       	mov	r24, r28
 2fa:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <is_raining>:

int is_raining(uint16_t length)
{
	static uint8_t raining = 0;
	static uint8_t previous_length = 0;
	if (length < previous_length)
 302:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <previous_length.2116>
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	82 17       	cp	r24, r18
 30a:	93 07       	cpc	r25, r19
 30c:	20 f4       	brcc	.+8      	; 0x316 <is_raining+0x14>
	{
		raining = 1;
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__data_end>
 314:	02 c0       	rjmp	.+4      	; 0x31a <is_raining+0x18>
	}
	else
	{
		raining = 0;
 316:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
	}

	previous_length = length;
 31a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <previous_length.2116>
	return raining;
 31e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
}
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	08 95       	ret

00000326 <main>:

int main(void) {
	
	GPIO_config_output(&DDRD, trig);
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	8a e2       	ldi	r24, 0x2A	; 42
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD, trig);
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	8b e2       	ldi	r24, 0x2B	; 43
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	GPIO_config_input_nopull(&DDRD, echo);
 33a:	63 e0       	ldi	r22, 0x03	; 3
 33c:	8a e2       	ldi	r24, 0x2A	; 42
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	GPIO_config_output(&DDRB, relay_pin);
 344:	64 e0       	ldi	r22, 0x04	; 4
 346:	84 e2       	ldi	r24, 0x24	; 36
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_high(&PORTB, relay_pin);
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	85 e2       	ldi	r24, 0x25	; 37
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_write_high>
	
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 358:	8c e0       	ldi	r24, 0x0C	; 12
 35a:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_init>
    lcd_gotoxy(0, 1);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
    lcd_puts("LVL:");
 366:	8c e3       	ldi	r24, 0x3C	; 60
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_puts>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 36e:	80 e4       	ldi	r24, 0x40	; 64
 370:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
	for (uint8_t i = 0; i < 40; i++) {
 374:	c0 e0       	ldi	r28, 0x00	; 0
 376:	08 c0       	rjmp	.+16     	; 0x388 <main+0x62>
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 378:	ec 2f       	mov	r30, r28
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	e0 50       	subi	r30, 0x00	; 0
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	80 81       	ld	r24, Z
 382:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_data>
    lcd_gotoxy(0, 1);
    lcd_puts("LVL:");

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 40; i++) {
 386:	cf 5f       	subi	r28, 0xFF	; 255
 388:	c8 32       	cpi	r28, 0x28	; 40
 38a:	b0 f3       	brcs	.-20     	; 0x378 <main+0x52>
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 38c:	80 e8       	ldi	r24, 0x80	; 128
 38e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
	
	//starting uart communication
	//uart_init(UART_BAUD_SELECT(9600, 16000000UL));
	
	// enable external interrupt to any logical change (datasheet page 80)
	EIMSK |= (1<<INT0);
 392:	8d b3       	in	r24, 0x1d	; 29
 394:	81 60       	ori	r24, 0x01	; 1
 396:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);
 398:	e9 e6       	ldi	r30, 0x69	; 105
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
 3a2:	80 81       	ld	r24, Z
 3a4:	8d 7f       	andi	r24, 0xFD	; 253
 3a6:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 3a8:	78 94       	sei

    // Infinite loop
    while (1) {
        //uart_puts("while is working\r\n");
		GPIO_write_high(&DDRD, trig);
 3aa:	62 e0       	ldi	r22, 0x02	; 2
 3ac:	8a e2       	ldi	r24, 0x2A	; 42
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_write_high>
 3b4:	25 e3       	ldi	r18, 0x35	; 53
 3b6:	2a 95       	dec	r18
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <main+0x90>
 3ba:	00 00       	nop
        _delay_us(10);
        GPIO_write_low(&DDRD, trig);
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	8a e2       	ldi	r24, 0x2A	; 42
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
		length = pulse_length * 0.008325; // number of edges * prescaler (8) / FCPU * speed of sound (333ms-1) / 2 (there and back again... as Bilbo)
 3c6:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <pulse_length>
 3ca:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <pulse_length+0x1>
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 44 03 	call	0x688	; 0x688 <__floatunsisf>
 3d6:	25 e9       	ldi	r18, 0x95	; 149
 3d8:	35 e6       	ldi	r19, 0x65	; 101
 3da:	48 e0       	ldi	r20, 0x08	; 8
 3dc:	5c e3       	ldi	r21, 0x3C	; 60
 3de:	0e 94 aa 03 	call	0x754	; 0x754 <__mulsf3>
 3e2:	0e 94 15 03 	call	0x62a	; 0x62a <__fixunssfsi>
 3e6:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <length+0x1>
 3ea:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <length>
		if (is_raining(length))
 3ee:	cb 01       	movw	r24, r22
 3f0:	0e 94 81 01 	call	0x302	; 0x302 <is_raining>
 3f4:	89 2b       	or	r24, r25
 3f6:	41 f0       	breq	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			lcd_gotoxy(15,0);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	8f e0       	ldi	r24, 0x0F	; 15
 3fc:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
			lcd_putc(4);
 400:	84 e0       	ldi	r24, 0x04	; 4
 402:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
 406:	08 c0       	rjmp	.+16     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		}
		else
		{
			lcd_gotoxy(15,0);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	8f e0       	ldi	r24, 0x0F	; 15
 40c:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
			lcd_puts(" ");
 410:	87 e4       	ldi	r24, 0x47	; 71
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_puts>
		}
		
		
		itoa((200 - length), lcd_string, 10);
 418:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <length>
 41c:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <length+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 420:	4a e0       	ldi	r20, 0x0A	; 10
 422:	68 e2       	ldi	r22, 0x28	; 40
 424:	71 e0       	ldi	r23, 0x01	; 1
 426:	88 ec       	ldi	r24, 0xC8	; 200
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	82 1b       	sub	r24, r18
 42c:	93 0b       	sbc	r25, r19
 42e:	0e 94 3f 04 	call	0x87e	; 0x87e <__itoa_ncheck>
		//uart_puts(lcd_string);
		//uart_puts("\r\n");
		//uart_puts("TIM0 disp ovrf/r/n");
		lcd_gotoxy(5,1);
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	85 e0       	ldi	r24, 0x05	; 5
 436:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
		lcd_puts("       ");
 43a:	81 e4       	ldi	r24, 0x41	; 65
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_puts>
		lcd_gotoxy(5,1);
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	85 e0       	ldi	r24, 0x05	; 5
 446:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
		lcd_puts(lcd_string);
 44a:	88 e2       	ldi	r24, 0x28	; 40
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_puts>
		lcd_puts("cm");
 452:	89 e4       	ldi	r24, 0x49	; 73
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_puts>
		if (length <= 25)
 45a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <length>
 45e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <length+0x1>
 462:	8a 31       	cpi	r24, 0x1A	; 26
 464:	91 05       	cpc	r25, r1
 466:	40 f4       	brcc	.+16     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		{
			lcd_gotoxy(15,1);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	8f e0       	ldi	r24, 0x0F	; 15
 46c:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
			lcd_putc(0);
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
 476:	1d c0       	rjmp	.+58     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		}
		else if (length <= 100)
 478:	85 36       	cpi	r24, 0x65	; 101
 47a:	91 05       	cpc	r25, r1
 47c:	40 f4       	brcc	.+16     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		{
			lcd_gotoxy(15,1);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	8f e0       	ldi	r24, 0x0F	; 15
 482:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
			lcd_putc(1);
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
 48c:	12 c0       	rjmp	.+36     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		}
		else if (length <= 175)
 48e:	80 3b       	cpi	r24, 0xB0	; 176
 490:	91 05       	cpc	r25, r1
 492:	40 f4       	brcc	.+16     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{
			lcd_gotoxy(15,1);
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	8f e0       	ldi	r24, 0x0F	; 15
 498:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
			lcd_putc(2);
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
 4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		}
		else
		{
			lcd_gotoxy(15,1);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	8f e0       	ldi	r24, 0x0F	; 15
 4a8:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
			lcd_putc(3);
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	93 ed       	ldi	r25, 0xD3	; 211
 4b6:	20 e3       	ldi	r18, 0x30	; 48
 4b8:	81 50       	subi	r24, 0x01	; 1
 4ba:	90 40       	sbci	r25, 0x00	; 0
 4bc:	20 40       	sbci	r18, 0x00	; 0
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4c2:	00 00       	nop
		}
		_delay_ms(1000);
		if ((length <= 10) && (!pump_running))
 4c4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <length>
 4c8:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <length+0x1>
 4cc:	8b 30       	cpi	r24, 0x0B	; 11
 4ce:	91 05       	cpc	r25, r1
 4d0:	68 f4       	brcc	.+26     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4d2:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <pump_running>
 4d6:	21 11       	cpse	r18, r1
 4d8:	09 c0       	rjmp	.+18     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
		{
			GPIO_write_low(&PORTB, relay_pin);
 4da:	64 e0       	ldi	r22, 0x04	; 4
 4dc:	85 e2       	ldi	r24, 0x25	; 37
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
			pump_running = 1;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <pump_running>
 4ea:	5f cf       	rjmp	.-322    	; 0x3aa <main+0x84>
		}
		else if ((length >= pump_out_limit) && (pump_running))
 4ec:	c2 97       	sbiw	r24, 0x32	; 50
 4ee:	08 f4       	brcc	.+2      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4f0:	5c cf       	rjmp	.-328    	; 0x3aa <main+0x84>
 4f2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <pump_running>
 4f6:	88 23       	and	r24, r24
 4f8:	09 f4       	brne	.+2      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fa:	57 cf       	rjmp	.-338    	; 0x3aa <main+0x84>
		{
			GPIO_write_high(&PORTB, relay_pin);
 4fc:	64 e0       	ldi	r22, 0x04	; 4
 4fe:	85 e2       	ldi	r24, 0x25	; 37
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_write_high>
			pump_running = 0;
 506:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <pump_running>
 50a:	4f cf       	rjmp	.-354    	; 0x3aa <main+0x84>

0000050c <__vector_1>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Measure water level.
 **********************************************************************/

ISR(INT0_vect) {
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	ef 93       	push	r30
 51c:	ff 93       	push	r31
	if (counting == 0) {
 51e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <counting>
 522:	81 11       	cpse	r24, r1
 524:	0c c0       	rjmp	.+24     	; 0x53e <__vector_1+0x32>
		counting = 1;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <counting>
		TIM1_overflow_33ms();
 52c:	e1 e8       	ldi	r30, 0x81	; 129
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	8a 7f       	andi	r24, 0xFA	; 250
 534:	80 83       	st	Z, r24
 536:	80 81       	ld	r24, Z
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	80 83       	st	Z, r24
 53c:	15 c0       	rjmp	.+42     	; 0x568 <__vector_1+0x5c>
	}
	else if (counting == 1) {
 53e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <counting>
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	89 f4       	brne	.+34     	; 0x568 <__vector_1+0x5c>
		TIM1_stop();
 546:	e1 e8       	ldi	r30, 0x81	; 129
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	88 7f       	andi	r24, 0xF8	; 248
 54e:	80 83       	st	Z, r24
		pulse_length = TCNT1;
 550:	e4 e8       	ldi	r30, 0x84	; 132
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	91 81       	ldd	r25, Z+1	; 0x01
 558:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <pulse_length+0x1>
 55c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <pulse_length>
		TCNT1 = 0;
 560:	11 82       	std	Z+1, r1	; 0x01
 562:	10 82       	st	Z, r1
		counting = 0;
 564:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <counting>
	}	
}
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	8f 93       	push	r24
 588:	9f 93       	push	r25
 58a:	ef 93       	push	r30
 58c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 58e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 592:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 596:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 598:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <UART_RxHead>
 59c:	ef 5f       	subi	r30, 0xFF	; 255
 59e:	ef 77       	andi	r30, 0x7F	; 127

    if (tmphead == UART_RxTail)
 5a0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <UART_RxTail>
 5a4:	e9 17       	cp	r30, r25
 5a6:	39 f0       	breq	.+14     	; 0x5b6 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 5a8:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	eb 5a       	subi	r30, 0xAB	; 171
 5b0:	fe 4f       	sbci	r31, 0xFE	; 254
 5b2:	20 83       	st	Z, r18
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 5b6:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 5b8:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <UART_LastRxError>
 5bc:	89 2b       	or	r24, r25
 5be:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <UART_LastRxError>
}
 5c2:	ff 91       	pop	r31
 5c4:	ef 91       	pop	r30
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	2f 91       	pop	r18
 5cc:	0f 90       	pop	r0
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	0f 90       	pop	r0
 5d2:	1f 90       	pop	r1
 5d4:	18 95       	reti

000005d6 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 5e8:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <UART_TxHead>
 5ec:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <UART_TxTail>
 5f0:	98 17       	cp	r25, r24
 5f2:	69 f0       	breq	.+26     	; 0x60e <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 5f4:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <UART_TxTail>
 5f8:	ef 5f       	subi	r30, 0xFF	; 255
 5fa:	ef 77       	andi	r30, 0x7F	; 127
        UART_TxTail = tmptail;
 5fc:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	eb 52       	subi	r30, 0x2B	; 43
 604:	fe 4f       	sbci	r31, 0xFE	; 254
 606:	80 81       	ld	r24, Z
 608:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 60c:	05 c0       	rjmp	.+10     	; 0x618 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 60e:	e1 ec       	ldi	r30, 0xC1	; 193
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	8f 7d       	andi	r24, 0xDF	; 223
 616:	80 83       	st	Z, r24
    }
}
 618:	ff 91       	pop	r31
 61a:	ef 91       	pop	r30
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <__fixunssfsi>:
 62a:	0e 94 89 03 	call	0x712	; 0x712 <__fp_splitA>
 62e:	88 f0       	brcs	.+34     	; 0x652 <__fixunssfsi+0x28>
 630:	9f 57       	subi	r25, 0x7F	; 127
 632:	98 f0       	brcs	.+38     	; 0x65a <__fixunssfsi+0x30>
 634:	b9 2f       	mov	r27, r25
 636:	99 27       	eor	r25, r25
 638:	b7 51       	subi	r27, 0x17	; 23
 63a:	b0 f0       	brcs	.+44     	; 0x668 <__fixunssfsi+0x3e>
 63c:	e1 f0       	breq	.+56     	; 0x676 <__fixunssfsi+0x4c>
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	1a f0       	brmi	.+6      	; 0x64e <__fixunssfsi+0x24>
 648:	ba 95       	dec	r27
 64a:	c9 f7       	brne	.-14     	; 0x63e <__fixunssfsi+0x14>
 64c:	14 c0       	rjmp	.+40     	; 0x676 <__fixunssfsi+0x4c>
 64e:	b1 30       	cpi	r27, 0x01	; 1
 650:	91 f0       	breq	.+36     	; 0x676 <__fixunssfsi+0x4c>
 652:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_zero>
 656:	b1 e0       	ldi	r27, 0x01	; 1
 658:	08 95       	ret
 65a:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_zero>
 65e:	67 2f       	mov	r22, r23
 660:	78 2f       	mov	r23, r24
 662:	88 27       	eor	r24, r24
 664:	b8 5f       	subi	r27, 0xF8	; 248
 666:	39 f0       	breq	.+14     	; 0x676 <__fixunssfsi+0x4c>
 668:	b9 3f       	cpi	r27, 0xF9	; 249
 66a:	cc f3       	brlt	.-14     	; 0x65e <__fixunssfsi+0x34>
 66c:	86 95       	lsr	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b3 95       	inc	r27
 674:	d9 f7       	brne	.-10     	; 0x66c <__fixunssfsi+0x42>
 676:	3e f4       	brtc	.+14     	; 0x686 <__fixunssfsi+0x5c>
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	08 95       	ret

00000688 <__floatunsisf>:
 688:	e8 94       	clt
 68a:	09 c0       	rjmp	.+18     	; 0x69e <__floatsisf+0x12>

0000068c <__floatsisf>:
 68c:	97 fb       	bst	r25, 7
 68e:	3e f4       	brtc	.+14     	; 0x69e <__floatsisf+0x12>
 690:	90 95       	com	r25
 692:	80 95       	com	r24
 694:	70 95       	com	r23
 696:	61 95       	neg	r22
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	99 23       	and	r25, r25
 6a0:	a9 f0       	breq	.+42     	; 0x6cc <__floatsisf+0x40>
 6a2:	f9 2f       	mov	r31, r25
 6a4:	96 e9       	ldi	r25, 0x96	; 150
 6a6:	bb 27       	eor	r27, r27
 6a8:	93 95       	inc	r25
 6aa:	f6 95       	lsr	r31
 6ac:	87 95       	ror	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b7 95       	ror	r27
 6b4:	f1 11       	cpse	r31, r1
 6b6:	f8 cf       	rjmp	.-16     	; 0x6a8 <__floatsisf+0x1c>
 6b8:	fa f4       	brpl	.+62     	; 0x6f8 <__floatsisf+0x6c>
 6ba:	bb 0f       	add	r27, r27
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <__floatsisf+0x36>
 6be:	60 ff       	sbrs	r22, 0
 6c0:	1b c0       	rjmp	.+54     	; 0x6f8 <__floatsisf+0x6c>
 6c2:	6f 5f       	subi	r22, 0xFF	; 255
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	16 c0       	rjmp	.+44     	; 0x6f8 <__floatsisf+0x6c>
 6cc:	88 23       	and	r24, r24
 6ce:	11 f0       	breq	.+4      	; 0x6d4 <__floatsisf+0x48>
 6d0:	96 e9       	ldi	r25, 0x96	; 150
 6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <__floatsisf+0x6a>
 6d4:	77 23       	and	r23, r23
 6d6:	21 f0       	breq	.+8      	; 0x6e0 <__floatsisf+0x54>
 6d8:	9e e8       	ldi	r25, 0x8E	; 142
 6da:	87 2f       	mov	r24, r23
 6dc:	76 2f       	mov	r23, r22
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <__floatsisf+0x5e>
 6e0:	66 23       	and	r22, r22
 6e2:	71 f0       	breq	.+28     	; 0x700 <__floatsisf+0x74>
 6e4:	96 e8       	ldi	r25, 0x86	; 134
 6e6:	86 2f       	mov	r24, r22
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	2a f0       	brmi	.+10     	; 0x6f8 <__floatsisf+0x6c>
 6ee:	9a 95       	dec	r25
 6f0:	66 0f       	add	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	da f7       	brpl	.-10     	; 0x6ee <__floatsisf+0x62>
 6f8:	88 0f       	add	r24, r24
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__fp_split3>:
 702:	57 fd       	sbrc	r21, 7
 704:	90 58       	subi	r25, 0x80	; 128
 706:	44 0f       	add	r20, r20
 708:	55 1f       	adc	r21, r21
 70a:	59 f0       	breq	.+22     	; 0x722 <__fp_splitA+0x10>
 70c:	5f 3f       	cpi	r21, 0xFF	; 255
 70e:	71 f0       	breq	.+28     	; 0x72c <__fp_splitA+0x1a>
 710:	47 95       	ror	r20

00000712 <__fp_splitA>:
 712:	88 0f       	add	r24, r24
 714:	97 fb       	bst	r25, 7
 716:	99 1f       	adc	r25, r25
 718:	61 f0       	breq	.+24     	; 0x732 <__fp_splitA+0x20>
 71a:	9f 3f       	cpi	r25, 0xFF	; 255
 71c:	79 f0       	breq	.+30     	; 0x73c <__fp_splitA+0x2a>
 71e:	87 95       	ror	r24
 720:	08 95       	ret
 722:	12 16       	cp	r1, r18
 724:	13 06       	cpc	r1, r19
 726:	14 06       	cpc	r1, r20
 728:	55 1f       	adc	r21, r21
 72a:	f2 cf       	rjmp	.-28     	; 0x710 <__fp_split3+0xe>
 72c:	46 95       	lsr	r20
 72e:	f1 df       	rcall	.-30     	; 0x712 <__fp_splitA>
 730:	08 c0       	rjmp	.+16     	; 0x742 <__fp_splitA+0x30>
 732:	16 16       	cp	r1, r22
 734:	17 06       	cpc	r1, r23
 736:	18 06       	cpc	r1, r24
 738:	99 1f       	adc	r25, r25
 73a:	f1 cf       	rjmp	.-30     	; 0x71e <__fp_splitA+0xc>
 73c:	86 95       	lsr	r24
 73e:	71 05       	cpc	r23, r1
 740:	61 05       	cpc	r22, r1
 742:	08 94       	sec
 744:	08 95       	ret

00000746 <__fp_zero>:
 746:	e8 94       	clt

00000748 <__fp_szero>:
 748:	bb 27       	eor	r27, r27
 74a:	66 27       	eor	r22, r22
 74c:	77 27       	eor	r23, r23
 74e:	cb 01       	movw	r24, r22
 750:	97 f9       	bld	r25, 7
 752:	08 95       	ret

00000754 <__mulsf3>:
 754:	0e 94 bd 03 	call	0x77a	; 0x77a <__mulsf3x>
 758:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_round>
 75c:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscA>
 760:	38 f0       	brcs	.+14     	; 0x770 <__mulsf3+0x1c>
 762:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_pscB>
 766:	20 f0       	brcs	.+8      	; 0x770 <__mulsf3+0x1c>
 768:	95 23       	and	r25, r21
 76a:	11 f0       	breq	.+4      	; 0x770 <__mulsf3+0x1c>
 76c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 770:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_nan>
 774:	11 24       	eor	r1, r1
 776:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_szero>

0000077a <__mulsf3x>:
 77a:	0e 94 81 03 	call	0x702	; 0x702 <__fp_split3>
 77e:	70 f3       	brcs	.-36     	; 0x75c <__mulsf3+0x8>

00000780 <__mulsf3_pse>:
 780:	95 9f       	mul	r25, r21
 782:	c1 f3       	breq	.-16     	; 0x774 <__mulsf3+0x20>
 784:	95 0f       	add	r25, r21
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	55 1f       	adc	r21, r21
 78a:	62 9f       	mul	r22, r18
 78c:	f0 01       	movw	r30, r0
 78e:	72 9f       	mul	r23, r18
 790:	bb 27       	eor	r27, r27
 792:	f0 0d       	add	r31, r0
 794:	b1 1d       	adc	r27, r1
 796:	63 9f       	mul	r22, r19
 798:	aa 27       	eor	r26, r26
 79a:	f0 0d       	add	r31, r0
 79c:	b1 1d       	adc	r27, r1
 79e:	aa 1f       	adc	r26, r26
 7a0:	64 9f       	mul	r22, r20
 7a2:	66 27       	eor	r22, r22
 7a4:	b0 0d       	add	r27, r0
 7a6:	a1 1d       	adc	r26, r1
 7a8:	66 1f       	adc	r22, r22
 7aa:	82 9f       	mul	r24, r18
 7ac:	22 27       	eor	r18, r18
 7ae:	b0 0d       	add	r27, r0
 7b0:	a1 1d       	adc	r26, r1
 7b2:	62 1f       	adc	r22, r18
 7b4:	73 9f       	mul	r23, r19
 7b6:	b0 0d       	add	r27, r0
 7b8:	a1 1d       	adc	r26, r1
 7ba:	62 1f       	adc	r22, r18
 7bc:	83 9f       	mul	r24, r19
 7be:	a0 0d       	add	r26, r0
 7c0:	61 1d       	adc	r22, r1
 7c2:	22 1f       	adc	r18, r18
 7c4:	74 9f       	mul	r23, r20
 7c6:	33 27       	eor	r19, r19
 7c8:	a0 0d       	add	r26, r0
 7ca:	61 1d       	adc	r22, r1
 7cc:	23 1f       	adc	r18, r19
 7ce:	84 9f       	mul	r24, r20
 7d0:	60 0d       	add	r22, r0
 7d2:	21 1d       	adc	r18, r1
 7d4:	82 2f       	mov	r24, r18
 7d6:	76 2f       	mov	r23, r22
 7d8:	6a 2f       	mov	r22, r26
 7da:	11 24       	eor	r1, r1
 7dc:	9f 57       	subi	r25, 0x7F	; 127
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	9a f0       	brmi	.+38     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e2:	f1 f0       	breq	.+60     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7e4:	88 23       	and	r24, r24
 7e6:	4a f0       	brmi	.+18     	; 0x7fa <__mulsf3_pse+0x7a>
 7e8:	ee 0f       	add	r30, r30
 7ea:	ff 1f       	adc	r31, r31
 7ec:	bb 1f       	adc	r27, r27
 7ee:	66 1f       	adc	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	88 1f       	adc	r24, r24
 7f4:	91 50       	subi	r25, 0x01	; 1
 7f6:	50 40       	sbci	r21, 0x00	; 0
 7f8:	a9 f7       	brne	.-22     	; 0x7e4 <__mulsf3_pse+0x64>
 7fa:	9e 3f       	cpi	r25, 0xFE	; 254
 7fc:	51 05       	cpc	r21, r1
 7fe:	80 f0       	brcs	.+32     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 800:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 804:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_szero>
 808:	5f 3f       	cpi	r21, 0xFF	; 255
 80a:	e4 f3       	brlt	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 80c:	98 3e       	cpi	r25, 0xE8	; 232
 80e:	d4 f3       	brlt	.-12     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 810:	86 95       	lsr	r24
 812:	77 95       	ror	r23
 814:	67 95       	ror	r22
 816:	b7 95       	ror	r27
 818:	f7 95       	ror	r31
 81a:	e7 95       	ror	r30
 81c:	9f 5f       	subi	r25, 0xFF	; 255
 81e:	c1 f7       	brne	.-16     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 820:	fe 2b       	or	r31, r30
 822:	88 0f       	add	r24, r24
 824:	91 1d       	adc	r25, r1
 826:	96 95       	lsr	r25
 828:	87 95       	ror	r24
 82a:	97 f9       	bld	r25, 7
 82c:	08 95       	ret

0000082e <__fp_inf>:
 82e:	97 f9       	bld	r25, 7
 830:	9f 67       	ori	r25, 0x7F	; 127
 832:	80 e8       	ldi	r24, 0x80	; 128
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	08 95       	ret

0000083a <__fp_nan>:
 83a:	9f ef       	ldi	r25, 0xFF	; 255
 83c:	80 ec       	ldi	r24, 0xC0	; 192
 83e:	08 95       	ret

00000840 <__fp_pscA>:
 840:	00 24       	eor	r0, r0
 842:	0a 94       	dec	r0
 844:	16 16       	cp	r1, r22
 846:	17 06       	cpc	r1, r23
 848:	18 06       	cpc	r1, r24
 84a:	09 06       	cpc	r0, r25
 84c:	08 95       	ret

0000084e <__fp_pscB>:
 84e:	00 24       	eor	r0, r0
 850:	0a 94       	dec	r0
 852:	12 16       	cp	r1, r18
 854:	13 06       	cpc	r1, r19
 856:	14 06       	cpc	r1, r20
 858:	05 06       	cpc	r0, r21
 85a:	08 95       	ret

0000085c <__fp_round>:
 85c:	09 2e       	mov	r0, r25
 85e:	03 94       	inc	r0
 860:	00 0c       	add	r0, r0
 862:	11 f4       	brne	.+4      	; 0x868 <__fp_round+0xc>
 864:	88 23       	and	r24, r24
 866:	52 f0       	brmi	.+20     	; 0x87c <__fp_round+0x20>
 868:	bb 0f       	add	r27, r27
 86a:	40 f4       	brcc	.+16     	; 0x87c <__fp_round+0x20>
 86c:	bf 2b       	or	r27, r31
 86e:	11 f4       	brne	.+4      	; 0x874 <__fp_round+0x18>
 870:	60 ff       	sbrs	r22, 0
 872:	04 c0       	rjmp	.+8      	; 0x87c <__fp_round+0x20>
 874:	6f 5f       	subi	r22, 0xFF	; 255
 876:	7f 4f       	sbci	r23, 0xFF	; 255
 878:	8f 4f       	sbci	r24, 0xFF	; 255
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	08 95       	ret

0000087e <__itoa_ncheck>:
 87e:	bb 27       	eor	r27, r27
 880:	4a 30       	cpi	r20, 0x0A	; 10
 882:	31 f4       	brne	.+12     	; 0x890 <__itoa_ncheck+0x12>
 884:	99 23       	and	r25, r25
 886:	22 f4       	brpl	.+8      	; 0x890 <__itoa_ncheck+0x12>
 888:	bd e2       	ldi	r27, 0x2D	; 45
 88a:	90 95       	com	r25
 88c:	81 95       	neg	r24
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	0c 94 4b 04 	jmp	0x896	; 0x896 <__utoa_common>

00000894 <__utoa_ncheck>:
 894:	bb 27       	eor	r27, r27

00000896 <__utoa_common>:
 896:	fb 01       	movw	r30, r22
 898:	55 27       	eor	r21, r21
 89a:	aa 27       	eor	r26, r26
 89c:	88 0f       	add	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	aa 1f       	adc	r26, r26
 8a2:	a4 17       	cp	r26, r20
 8a4:	10 f0       	brcs	.+4      	; 0x8aa <__utoa_common+0x14>
 8a6:	a4 1b       	sub	r26, r20
 8a8:	83 95       	inc	r24
 8aa:	50 51       	subi	r21, 0x10	; 16
 8ac:	b9 f7       	brne	.-18     	; 0x89c <__utoa_common+0x6>
 8ae:	a0 5d       	subi	r26, 0xD0	; 208
 8b0:	aa 33       	cpi	r26, 0x3A	; 58
 8b2:	08 f0       	brcs	.+2      	; 0x8b6 <__utoa_common+0x20>
 8b4:	a9 5d       	subi	r26, 0xD9	; 217
 8b6:	a1 93       	st	Z+, r26
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	79 f7       	brne	.-34     	; 0x89a <__utoa_common+0x4>
 8bc:	b1 11       	cpse	r27, r1
 8be:	b1 93       	st	Z+, r27
 8c0:	11 92       	st	Z+, r1
 8c2:	cb 01       	movw	r24, r22
 8c4:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <strrev>

000008c8 <strrev>:
 8c8:	dc 01       	movw	r26, r24
 8ca:	fc 01       	movw	r30, r24
 8cc:	67 2f       	mov	r22, r23
 8ce:	71 91       	ld	r23, Z+
 8d0:	77 23       	and	r23, r23
 8d2:	e1 f7       	brne	.-8      	; 0x8cc <strrev+0x4>
 8d4:	32 97       	sbiw	r30, 0x02	; 2
 8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <strrev+0x18>
 8d8:	7c 91       	ld	r23, X
 8da:	6d 93       	st	X+, r22
 8dc:	70 83       	st	Z, r23
 8de:	62 91       	ld	r22, -Z
 8e0:	ae 17       	cp	r26, r30
 8e2:	bf 07       	cpc	r27, r31
 8e4:	c8 f3       	brcs	.-14     	; 0x8d8 <strrev+0x10>
 8e6:	08 95       	ret

000008e8 <_exit>:
 8e8:	f8 94       	cli

000008ea <__stop_program>:
 8ea:	ff cf       	rjmp	.-2      	; 0x8ea <__stop_program>
