
interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d12  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000468  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002351  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  a8:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_write_low+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_write_low+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  c2:	fc 01       	movw	r30, r24
  c4:	40 81       	ld	r20, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <GPIO_write_high+0xe>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <GPIO_write_high+0xa>
  d4:	24 2b       	or	r18, r20
  d6:	20 83       	st	Z, r18
  d8:	08 95       	ret

000000da <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	84 e2       	ldi	r24, 0x24	; 36
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D1);
  e4:	65 e0       	ldi	r22, 0x05	; 5
  e6:	85 e2       	ldi	r24, 0x25	; 37
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
	GPIO_config_output(&DDRB, LED_D2);
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	84 e2       	ldi	r24, 0x24	; 36
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	GPIO_write_high(&PORTB, LED_D2);
  f8:	64 e0       	ldi	r22, 0x04	; 4
  fa:	85 e2       	ldi	r24, 0x25	; 37
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
	GPIO_config_output(&DDRB, LED_D3);
 102:	63 e0       	ldi	r22, 0x03	; 3
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	GPIO_write_high(&PORTB, LED_D3);
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	85 e2       	ldi	r24, 0x25	; 37
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
	GPIO_config_output(&DDRB, LED_D4);
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	GPIO_write_high(&PORTB, LED_D4);
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
	

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	80 83       	st	Z, r24
 134:	80 81       	ld	r24, Z
 136:	83 60       	ori	r24, 0x03	; 3
 138:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 13a:	ef e6       	ldi	r30, 0x6F	; 111
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 144:	78 94       	sei
 146:	ff cf       	rjmp	.-2      	; 0x146 <main+0x6c>

00000148 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
    
	static uint8_t  i = 0;
	if(i==6)
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	86 30       	cpi	r24, 0x06	; 6
 170:	b1 f4       	brne	.+44     	; 0x19e <__vector_13+0x56>
	{
		GPIO_write_low(&PORTB, LED_D1);
 172:	65 e0       	ldi	r22, 0x05	; 5
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		GPIO_write_high(&PORTB, LED_D2);
 17c:	64 e0       	ldi	r22, 0x04	; 4
 17e:	85 e2       	ldi	r24, 0x25	; 37
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D3);
 186:	63 e0       	ldi	r22, 0x03	; 3
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D4);
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	85 e2       	ldi	r24, 0x25	; 37
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		i++;
		i=0;
 19a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(i==5)
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a2:	85 30       	cpi	r24, 0x05	; 5
 1a4:	c9 f4       	brne	.+50     	; 0x1d8 <__vector_13+0x90>
	{
		GPIO_write_low(&PORTB, LED_D2);
 1a6:	64 e0       	ldi	r22, 0x04	; 4
 1a8:	85 e2       	ldi	r24, 0x25	; 37
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		GPIO_write_high(&PORTB, LED_D1);
 1b0:	65 e0       	ldi	r22, 0x05	; 5
 1b2:	85 e2       	ldi	r24, 0x25	; 37
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D3);
 1ba:	63 e0       	ldi	r22, 0x03	; 3
 1bc:	85 e2       	ldi	r24, 0x25	; 37
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D4);
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	85 e2       	ldi	r24, 0x25	; 37
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		i++;
 1ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(i==4)
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1dc:	84 30       	cpi	r24, 0x04	; 4
 1de:	c9 f4       	brne	.+50     	; 0x212 <__vector_13+0xca>
	{
		GPIO_write_low(&PORTB, LED_D3);
 1e0:	63 e0       	ldi	r22, 0x03	; 3
 1e2:	85 e2       	ldi	r24, 0x25	; 37
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		GPIO_write_high(&PORTB, LED_D1);
 1ea:	65 e0       	ldi	r22, 0x05	; 5
 1ec:	85 e2       	ldi	r24, 0x25	; 37
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D2);
 1f4:	64 e0       	ldi	r22, 0x04	; 4
 1f6:	85 e2       	ldi	r24, 0x25	; 37
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D4);
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	85 e2       	ldi	r24, 0x25	; 37
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		i++;
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(i==3)
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	c9 f4       	brne	.+50     	; 0x24c <__vector_13+0x104>
	{
		GPIO_write_low(&PORTB, LED_D4);
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	85 e2       	ldi	r24, 0x25	; 37
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		GPIO_write_high(&PORTB, LED_D1);
 224:	65 e0       	ldi	r22, 0x05	; 5
 226:	85 e2       	ldi	r24, 0x25	; 37
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D2);
 22e:	64 e0       	ldi	r22, 0x04	; 4
 230:	85 e2       	ldi	r24, 0x25	; 37
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D3);
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	85 e2       	ldi	r24, 0x25	; 37
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		i++;
 242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(i==2)
 24c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	c9 f4       	brne	.+50     	; 0x286 <__vector_13+0x13e>
	{
		GPIO_write_low(&PORTB, LED_D3);
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	85 e2       	ldi	r24, 0x25	; 37
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		GPIO_write_high(&PORTB, LED_D1);
 25e:	65 e0       	ldi	r22, 0x05	; 5
 260:	85 e2       	ldi	r24, 0x25	; 37
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D2);
 268:	64 e0       	ldi	r22, 0x04	; 4
 26a:	85 e2       	ldi	r24, 0x25	; 37
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D4);
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	85 e2       	ldi	r24, 0x25	; 37
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		i++;
 27c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(i==1)
 286:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	c9 f4       	brne	.+50     	; 0x2c0 <__vector_13+0x178>
	{
		GPIO_write_low(&PORTB, LED_D2);
 28e:	64 e0       	ldi	r22, 0x04	; 4
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		GPIO_write_high(&PORTB, LED_D1);
 298:	65 e0       	ldi	r22, 0x05	; 5
 29a:	85 e2       	ldi	r24, 0x25	; 37
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D3);
 2a2:	63 e0       	ldi	r22, 0x03	; 3
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D4);
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	85 e2       	ldi	r24, 0x25	; 37
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		i++;
 2b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(i==0)
 2c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c4:	81 11       	cpse	r24, r1
 2c6:	19 c0       	rjmp	.+50     	; 0x2fa <__vector_13+0x1b2>
	{
		GPIO_write_low(&PORTB, LED_D1);
 2c8:	65 e0       	ldi	r22, 0x05	; 5
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		GPIO_write_high(&PORTB, LED_D2);
 2d2:	64 e0       	ldi	r22, 0x04	; 4
 2d4:	85 e2       	ldi	r24, 0x25	; 37
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D3);
 2dc:	63 e0       	ldi	r22, 0x03	; 3
 2de:	85 e2       	ldi	r24, 0x25	; 37
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		GPIO_write_high(&PORTB, LED_D4);
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	85 e2       	ldi	r24, 0x25	; 37
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
		i++;
 2f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
